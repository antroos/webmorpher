import sys
import os
import json
import asyncio
import socket
import subprocess
import time
from functools import partial
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QPushButton, QTextEdit, QLabel, QLineEdit, QMessageBox, QDialog,
                            QListWidget, QTabWidget, QSplitter, QFrame, QFileDialog, QCheckBox,
                            QStyleFactory)
from PyQt5.QtCore import Qt, QSize, QThread, pyqtSignal, QObject, QRect, QPoint
from PyQt5.QtGui import QFont, QPalette, QColor, QFontDatabase
from browser_use import Agent, Browser, BrowserConfig
from langchain_openai import ChatOpenAI
from tempfile import gettempdir

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ .app –±–∞–Ω–¥–ª–∞
    APP_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(sys.executable)))
    RESOURCES_ROOT = os.path.join(APP_ROOT, 'Resources')
else:
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    APP_ROOT = os.path.dirname(os.path.abspath(__file__))
    RESOURCES_ROOT = APP_ROOT

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
CONFIG_FILE = os.path.expanduser("~/.webmorpher_config.json")
# –®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ—Ñ—ñ–ª—é –±—Ä–∞—É–∑–µ—Ä–∞
BROWSER_PROFILE_DIR = os.path.expanduser("~/.webmorpher_browser_profile")

def get_default_chrome_profile():
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Chrome/Chromium"""
    user_profile_dir = None
    
    if sys.platform == 'darwin':  # macOS
        # –®–ª—è—Ö –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é Chrome –Ω–∞ macOS
        chrome_profile_alt = os.path.expanduser("~/Library/Application Support/Google/Chrome")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥—É
        if os.path.exists(chrome_profile_alt) and os.path.isdir(chrome_profile_alt):
            user_profile_dir = chrome_profile_alt
    elif sys.platform.startswith('win'):  # Windows
        # –®–ª—è—Ö –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é Chrome –Ω–∞ Windows
        chrome_profile = os.path.join(os.environ.get('LOCALAPPDATA', ''), 
                                     "Google", "Chrome", "User Data")
        if os.path.exists(chrome_profile) and os.path.isdir(chrome_profile):
            user_profile_dir = chrome_profile
    elif sys.platform.startswith('linux'):  # Linux
        # –®–ª—è—Ö –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é Chrome –Ω–∞ Linux
        chrome_profile = os.path.expanduser("~/.config/google-chrome")
        if os.path.exists(chrome_profile) and os.path.isdir(chrome_profile):
            user_profile_dir = chrome_profile
    
    return user_profile_dir

class BrowserUseRunner(QThread):
    """–ö–ª–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É browser-use —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal()
    error_signal = pyqtSignal(str)
    
    def __init__(self, api_key, task, headless=False, debug_port=None, user_profile_dir=None):
        super().__init__()
        self.api_key = api_key
        self.task = task
        self.headless = headless
        self.debug_port = debug_port
        self.user_profile_dir = user_profile_dir
        self._is_paused = False
        self._is_stopped = False
        self.agent = None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ browser-use –∞–≥–µ–Ω—Ç–∞"""
        try:
            os.environ["OPENAI_API_KEY"] = self.api_key
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ChatOpenAI –º–æ–¥–µ–ª—ñ
            llm = ChatOpenAI(model="gpt-4o")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if self.debug_port:
                # –î–ª—è —Ä–µ–∂–∏–º—É –¥–µ–±–∞–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cdp_url
                browser_config = BrowserConfig(cdp_url=f"http://localhost:{self.debug_port}")
            else:
                # –®–ª—è—Ö –¥–æ Google Chrome –Ω–∞ macOS
                chrome_paths = [
                    "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
                    os.path.expanduser("~/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"),  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    "/Applications/Chromium.app/Contents/MacOS/Chromium",  # Chromium –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                ]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä
                chrome_path = None
                for path in chrome_paths:
                    if os.path.exists(path):
                        chrome_path = path
                        break
                
                if not chrome_path:
                    raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Google Chrome –∞–±–æ Chromium. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ–¥–∏–Ω –∑ –±—Ä–∞—É–∑–µ—Ä—ñ–≤.")
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                browser_config_params = {
                    'headless': self.headless,
                    'browser_binary_path': chrome_path,
                }
                
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if self.user_profile_dir:
                    browser_config_params['user_data_dir'] = self.user_profile_dir
                
                # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ browser_binary_path –∏ user_data_dir
                browser_config = BrowserConfig(**browser_config_params)
                
            browser = Browser(config=browser_config)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ callback –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            self.agent = Agent(
                task=self.task,
                llm=llm,
                browser=browser,
                register_new_step_callback=self._on_new_step
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            if not self._is_stopped:
                self.log_signal.emit("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞...")
                result = loop.run_until_complete(self._run_with_pause_check())
                self.log_signal.emit("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                self.finished_signal.emit()
        
        except Exception as e:
            self.error_signal.emit(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    async def _run_with_pause_check(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–∞—É–∑–∏"""
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞
            result = await self.agent.run()
            return result
        except Exception as e:
            self.error_signal.emit(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {str(e)}")
            return None
    
    async def _on_new_step(self, state, output, step_index):
        """–ö–æ–ª–±–µ–∫ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—ñ–≤ –∞–≥–µ–Ω—Ç–∞"""
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ AgentBrain
        if hasattr(output, 'current_state'):
            brain = output.current_state
            if brain.next_goal:
                self.log_signal.emit(f"üéØ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ü—ñ–ª—å: {brain.next_goal}")
            if brain.evaluation_previous_goal:
                self.log_signal.emit(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç: {brain.evaluation_previous_goal}")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
        action_type = getattr(output, 'action_type', None)
        content = getattr(output, 'content', None)
        
        if action_type == "thinking":
            self.log_signal.emit(f"ü§î –ú–æ–¥–µ–ª—å –¥—É–º–∞—î: {content}")
        elif action_type == "browser_action":
            self.log_signal.emit(f"üåê –ë—Ä–∞—É–∑–µ—Ä: {content}")
        elif action_type == "agent_action":
            self.log_signal.emit(f"ü§ñ –ê–≥–µ–Ω—Ç: {content}")
        elif action_type == "error":
            self.log_signal.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {content}")
        elif content:
            self.log_signal.emit(f"{action_type}: {content}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–∞—É–∑–∞
        while self._is_paused and not self._is_stopped:
            await asyncio.sleep(0.1)  # –ú–∞–ª–µ–Ω—å–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ä
        
        # –Ø–∫—â–æ –∑—É–ø–∏–Ω–µ–Ω–æ, –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∞–≥–µ–Ω—Ç–∞
        if self._is_stopped:
            raise Exception("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    
    def pause(self):
        """–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        self._is_paused = True
        self.log_signal.emit("‚è∏Ô∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ...")
    
    def resume(self):
        """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        self._is_paused = False
        self.log_signal.emit("‚ñ∂Ô∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ...")
    
    def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        self._is_stopped = True
        self._is_paused = False
        self.log_signal.emit("‚èπÔ∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ!")

def find_free_port():
    """–ó–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω–∏–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–µ–±–∞–≥-—Å–µ—Ä–≤–µ—Ä–∞"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        return s.getsockname()[1]

def launch_debug_browser(port=9222, use_user_profile=True, user_profile_dir=None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É –Ω–∞ –≤–∫–∞–∑–∞–Ω–æ–º—É –ø–æ—Ä—Ç—ñ"""
    # –®–ª—è—Ö –¥–æ Chrome –Ω–∞ macOS
    if sys.platform == 'darwin':  # macOS
        chrome_paths = [
            "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
            os.path.expanduser("~/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"),  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            "/Applications/Chromium.app/Contents/MacOS/Chromium",  # Chromium –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        ]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä
        chrome_path = None
        for path in chrome_paths:
            if os.path.exists(path):
                chrome_path = path
                break
                
        if not chrome_path:
            raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Google Chrome –∞–±–æ Chromium. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ–¥–∏–Ω –∑ –±—Ä–∞—É–∑–µ—Ä—ñ–≤.")
            
        print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä –∑–∞ —à–ª—è—Ö–æ–º: {chrome_path}")
    else:
        # –î–ª—è Linux —Ç–∞ —ñ–Ω—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        chrome_path = "google-chrome"
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é Chrome
    if use_user_profile and user_profile_dir:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        debug_profile_dir = user_profile_dir
        print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–µ–±–∞–≥—É: {debug_profile_dir}")
    else:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é Chrome
        debug_profile_dir = os.path.join(gettempdir(), f"chrome-debug-{port}")
        os.makedirs(debug_profile_dir, exist_ok=True)
    
    cmd = [
        chrome_path,
        f"--remote-debugging-port={port}",
        "--no-first-run",
        "--no-default-browser-check",
        f"--user-data-dir={debug_profile_dir}",
        "--disable-application-cache",  # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–µ—à –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        "about:blank"
    ]
    
    print(f"–ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
    
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –∑ PID: {process.pid}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –±—Ä–∞—É–∑–µ—Ä —Å–ø—Ä–∞–≤–¥—ñ –ø—Ä–∞—Ü—é—î
        time.sleep(2)  # –ß–µ–∫–∞—î–º–æ, —â–æ–± –±—Ä–∞—É–∑–µ—Ä –≤—Å—Ç–∏–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ—Ü–µ—Å –¥–æ—Å—ñ –∞–∫—Ç–∏–≤–Ω–∏–π
        if process.poll() is not None:
            error = process.stderr.read().decode('utf-8', errors='ignore')
            raise Exception(f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. –ü–æ–º–∏–ª–∫–∞: {error}")
            
        return process, port
    except Exception as e:
        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä: {str(e)}")

class ApiKeyDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á")
        self.setFixedSize(400, 150)
        self.api_key = ""
        
        layout = QVBoxLayout()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        info_label = QLabel("–î–ª—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á OpenAI.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:")
        layout.addWidget(info_label)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É –∫–ª—é—á–∞
        self.key_input = QLineEdit()
        self.key_input.setPlaceholderText("sk-...")
        layout.addWidget(self.key_input)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.save_button = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_button.clicked.connect(self.accept_key)
        
        self.cancel_button = QPushButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
        self.cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        
        layout.addLayout(button_layout)
        self.setLayout(layout)
    
    def accept_key(self):
        api_key = self.key_input.text().strip()
        if not api_key or not api_key.startswith("sk-"):
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π API –∫–ª—é—á, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 'sk-'")
            return
        
        self.api_key = api_key
        self.accept()

class ProgramEditorDialog(QDialog):
    def __init__(self, program_name="", program_code="", parent=None):
        super().__init__(parent)
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏")
        self.setMinimumSize(600, 400)
        
        self.layout = QVBoxLayout()
        
        # –ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏
        name_layout = QHBoxLayout()
        name_label = QLabel("–ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏:")
        self.name_input = QLineEdit(program_name)
        name_layout.addWidget(name_label)
        name_layout.addWidget(self.name_input)
        self.layout.addLayout(name_layout)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥—É
        code_label = QLabel("–ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏:")
        self.code_editor = QTextEdit()
        self.code_editor.setPlainText(program_code)
        self.layout.addWidget(code_label)
        self.layout.addWidget(self.code_editor)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        self.save_button = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_button.clicked.connect(self.accept)
        
        self.cancel_button = QPushButton("–°–∫–∞—Å—É–≤–∞—Ç–∏")
        self.cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        
        self.layout.addLayout(button_layout)
        self.setLayout(self.layout)
    
    def get_program_data(self):
        return {
            "name": self.name_input.text().strip(),
            "code": self.code_editor.toPlainText().strip()
        }

class WebMorpherApp(QMainWindow):
    def __init__(self):
        super().__init__()
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Ç–∏–≤–Ω–∏–π —Å—Ç–∏–ª—å macOS
        QApplication.setStyle(QStyleFactory.create("macintosh"))
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π —à—Ä–∏—Ñ—Ç SF Pro
        font_id = QFontDatabase.addApplicationFont(":/System/Library/Fonts/SFPro.ttf")
        if font_id != -1:
            self.default_font = QFont("SF Pro", 13)
            QApplication.setFont(self.default_font)
        
        self.api_key = ""
        self.programs = []
        self.current_program = None
        self.program_running = False
        self.browser_runner = None
        self.debug_browser_process = None
        self.debug_port = None
        self.chrome_profile_path = get_default_chrome_profile()
        self.current_status = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.setWindowTitle("WebMorpher")
        self.setGeometry(100, 100, 1200, 800)  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setStyleSheet("""
            QMainWindow {
                background-color: rgba(255, 255, 255, 0.95);
            }
            QWidget {
                font-family: "SF Pro", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            }
            /* –°—Ç–∏–ª—ñ –¥–ª—è —Å–≤—ñ—Ç–ª–æ—ó —Ç–µ–º–∏ */
            QMainWindow[lightTheme="true"] {
                background-color: rgba(255, 255, 255, 0.95);
                color: #000000;
            }
            /* –°—Ç–∏–ª—ñ –¥–ª—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏ */
            QMainWindow[lightTheme="false"] {
                background-color: rgba(28, 28, 28, 0.95);
                color: #FFFFFF;
            }
            /* –ë–∞–∑–æ–≤—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ */
            QWidget {
                margin: 0;
                padding: 0;
            }
            /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
            QPushButton {
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-size: 13px;
                background-color: #007AFF;
                color: white;
                margin: 4px;
            }
            QPushButton:hover {
                background-color: #0063CC;
            }
            QPushButton:pressed {
                background-color: #004999;
            }
            QPushButton:disabled {
                background-color: #E5E5E5;
                color: #999999;
            }
            /* –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É */
            QLineEdit, QTextEdit {
                border: 1px solid #E5E5E5;
                border-radius: 6px;
                padding: 8px;
                background-color: rgba(255, 255, 255, 0.8);
            }
            /* –°—Ç–∏–ª—å –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤ */
            QListWidget {
                border: 1px solid #E5E5E5;
                border-radius: 6px;
                background-color: rgba(255, 255, 255, 0.8);
            }
            /* –°—Ç–∏–ª—å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
            QTabWidget::pane {
                border: 1px solid #E5E5E5;
                border-radius: 6px;
                background-color: rgba(255, 255, 255, 0.8);
            }
            QTabBar::tab {
                padding: 8px 16px;
                margin: 4px 2px;
                border-radius: 6px;
            }
            QTabBar::tab:selected {
                background-color: #007AFF;
                color: white;
            }
        """)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º—É —Å–∏—Å—Ç–µ–º–∏
        self.update_theme()
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞
        self.load_config()
        if not self.check_api_key():
            sys.exit()
            
        self.setup_ui()
        
    def update_theme(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏
        # –ù–∞—Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É
        self.setProperty("lightTheme", True)
        self.style().unpolish(self)
        self.style().polish(self)
    
    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r') as f:
                    config = json.load(f)
                    self.api_key = config.get('api_key', '')
                    self.programs = config.get('programs', [])
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def save_config(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª"""
        config = {
            'api_key': self.api_key,
            'programs': self.programs
        }
        try:
            with open(CONFIG_FILE, 'w') as f:
                json.dump(config, f)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def check_api_key(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –∫–ª—é—á–∞"""
        if not self.api_key:
            dialog = ApiKeyDialog(self)
            # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ
            dialog.key_input.setText("")  
            if dialog.exec_():
                self.api_key = dialog.api_key
                self.save_config()
                return True
            else:
                return False
        return True
            
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)  # –í—ñ–¥—Å—Ç—É–ø–∏ –∑–≥—ñ–¥–Ω–æ –≥–∞–π–¥–ª–∞–π–Ω—ñ–≤
        main_layout.setSpacing(16)  # –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        control_layout = QHBoxLayout()
        
        self.new_button = QPushButton("–ù–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∞")
        self.new_button.clicked.connect(self.create_program)
        
        self.edit_button = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
        self.edit_button.clicked.connect(self.edit_program)
        
        self.delete_button = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏")
        self.delete_button.clicked.connect(self.delete_program)
        
        self.run_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç–∏")
        self.run_button.clicked.connect(self.run_program)
        
        self.pause_button = QPushButton("–ü–∞—É–∑–∞")
        self.pause_button.clicked.connect(self.pause_program)
        self.pause_button.setEnabled(False)
        
        self.stop_button = QPushButton("–ó—É–ø–∏–Ω–∏—Ç–∏")
        self.stop_button.clicked.connect(self.stop_program)
        self.stop_button.setEnabled(False)
        
        self.debug_button = QPushButton("–†–µ–∂–∏–º –¥–µ–±–∞–≥—É")
        self.debug_button.clicked.connect(self.launch_debug_browser)
        
        self.api_button = QPushButton("–ó–º—ñ–Ω–∏—Ç–∏ API –∫–ª—é—á")
        self.api_button.clicked.connect(self.change_api_key)
        
        control_layout.addWidget(self.new_button)
        control_layout.addWidget(self.edit_button)
        control_layout.addWidget(self.delete_button)
        control_layout.addWidget(self.run_button)
        control_layout.addWidget(self.pause_button)
        control_layout.addWidget(self.stop_button)
        control_layout.addWidget(self.debug_button)
        control_layout.addWidget(self.api_button)
        
        main_layout.addLayout(control_layout)
        
        # –û–ø—Ü—ñ—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
        headless_layout = QHBoxLayout()
        self.headless_checkbox = QCheckBox("–ó–∞–ø—É—Å–∫–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")
        headless_layout.addWidget(self.headless_checkbox)
        
        # –û–ø—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.use_user_profile_checkbox = QCheckBox("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞")
        self.use_user_profile_checkbox.setToolTip("–ó–∞–ø—É—Å–∫–∞—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º, –¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–æ–ª—ñ, —ñ—Å—Ç–æ—Ä—ñ—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        if not self.chrome_profile_path:
            self.use_user_profile_checkbox.setEnabled(False)
            self.use_user_profile_checkbox.setToolTip("–ü—Ä–æ—Ñ—ñ–ª—å Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–ø—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.use_user_profile_checkbox.setChecked(True)
        
        headless_layout.addWidget(self.use_user_profile_checkbox)
        headless_layout.addStretch()
        main_layout.addLayout(headless_layout)
        
        # –†–æ–∑–¥—ñ–ª—é–≤–∞—á –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º —Ç–∞ –≤–∫–ª–∞–¥–æ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        splitter = QSplitter(Qt.Horizontal)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º
        program_frame = QFrame()
        program_layout = QVBoxLayout(program_frame)
        
        program_label = QLabel("–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏:")
        self.program_list = QListWidget()
        self.program_list.currentRowChanged.connect(self.on_program_selected)
        
        program_layout.addWidget(program_label)
        program_layout.addWidget(self.program_list)
        
        splitter.addWidget(program_frame)
        
        # –í–∫–ª–∞–¥–∫–∏ –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        tab_frame = QFrame()
        tab_layout = QVBoxLayout(tab_frame)
        
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–≥—Ä–∞–º–∏
        self.view_tab = QWidget()
        view_layout = QVBoxLayout(self.view_tab)
        
        self.code_view = QTextEdit()
        self.code_view.setReadOnly(True)
        view_layout.addWidget(self.code_view)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.result_tab = QWidget()
        result_layout = QVBoxLayout(self.result_tab)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        status_frame = QFrame()
        status_frame.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
        status_layout = QVBoxLayout(status_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
        status_header = QLabel("–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:")
        status_header.setFont(QFont("", 12, QFont.Bold))
        status_layout.addWidget(status_header)
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.status_label = QLabel("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É...")
        self.status_label.setFont(QFont("", 11))
        self.status_label.setStyleSheet("padding: 10px;")
        status_layout.addWidget(self.status_label)
        
        result_layout.addWidget(status_frame)
        
        # –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.result_view = QTextEdit()
        self.result_view.setReadOnly(True)
        result_layout.addWidget(self.result_view)
        
        self.tabs.addTab(self.view_tab, "–ü—Ä–æ–≥—Ä–∞–º–∞")
        self.tabs.addTab(self.result_tab, "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        
        tab_layout.addWidget(self.tabs)
        
        splitter.addWidget(tab_frame)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞
        splitter.setSizes([200, 800])
        
        main_layout.addWidget(splitter)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º
        self.load_program_list()
    
    def load_program_list(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º"""
        self.program_list.clear()
        for program in self.programs:
            self.program_list.addItem(program.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
    
    def on_program_selected(self, index):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ —Å–ø–∏—Å–∫—É"""
        if index >= 0 and index < len(self.programs):
            program = self.programs[index]
            self.current_program = program
            self.code_view.setPlainText(program.get("code", ""))
            self.result_view.clear()
            self.status_label.setText("–û–±—Ä–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É...")
            self.status_label.setStyleSheet("padding: 10px; color: black;")
        else:
            self.current_program = None
            self.code_view.clear()
            self.result_view.clear()
    
    def create_program(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
        dialog = ProgramEditorDialog(parent=self)
        if dialog.exec_():
            program_data = dialog.get_program_data()
            if not program_data["name"]:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
                return
            
            self.programs.append(program_data)
            self.save_config()
            self.load_program_list()
            self.status_label.setText("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É...")
            self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def edit_program(self):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if not self.current_program:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return
        
        index = self.program_list.currentRow()
        dialog = ProgramEditorDialog(
            program_name=self.current_program.get("name", ""),
            program_code=self.current_program.get("code", ""),
            parent=self
        )
        
        if dialog.exec_():
            program_data = dialog.get_program_data()
            if not program_data["name"]:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
                return
            
            self.programs[index] = program_data
            self.save_config()
            self.load_program_list()
            self.program_list.setCurrentRow(index)
            self.status_label.setText("–ü—Ä–æ–≥—Ä–∞–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ...")
            self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def delete_program(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if not self.current_program:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        
        index = self.program_list.currentRow()
        program_name = self.current_program.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        
        reply = QMessageBox.question(
            self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É '{program_name}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.programs.pop(index)
            self.save_config()
            self.load_program_list()
            self.status_label.setText("–ü—Ä–æ–≥—Ä–∞–º—É –≤–∏–¥–∞–ª–µ–Ω–æ...")
            self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def run_program(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if not self.current_program:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –∑–∞–ø—É—Å–∫—É")
            return
        
        program_name = self.current_program.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        program_code = self.current_program.get("code", "")
        
        if not program_code.strip():
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–¥—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
            return
            
        self.program_running = True
        self.pause_button.setEnabled(True)
        self.stop_button.setEnabled(True)
        self.run_button.setEnabled(False)
        
        # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.tabs.setCurrentIndex(1)
        
        # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —ñ —Å—Ç–∞—Ç—É—Å
        self.result_view.clear()
        self.status_label.setText("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏...")
        self.status_label.setStyleSheet("padding: 10px; color: black;")
        self.result_view.append(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏: {program_name}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
        use_user_profile = self.use_user_profile_checkbox.isChecked() and self.chrome_profile_path
        user_profile = self.chrome_profile_path if use_user_profile else None
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å
        if use_user_profile:
            self.result_view.append(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {self.chrome_profile_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è browser-use
        headless = self.headless_checkbox.isChecked()
        self.browser_runner = BrowserUseRunner(
            api_key=self.api_key,
            task=program_code,
            headless=headless,
            debug_port=self.debug_port,
            user_profile_dir=user_profile
        )
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
        self.browser_runner.log_signal.connect(self.on_browser_log)
        self.browser_runner.error_signal.connect(self.on_browser_error)
        self.browser_runner.finished_signal.connect(self.on_browser_finished)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        self.browser_runner.start()
        
        self.status_label.setText("–ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É...")
        self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def on_browser_log(self, message):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ª–æ–≥—ñ–≤ –≤—ñ–¥ browser-use"""
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ª–æ–≥ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        if "üéØ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ü—ñ–ª—å:" in message:
            self.result_view.append(f"<span style='color: #2196F3;'>{message}</span>")
        elif "‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç:" in message:
            self.result_view.append(f"<span style='color: #4CAF50;'>{message}</span>")
        elif "ü§î –ú–æ–¥–µ–ª—å –¥—É–º–∞—î:" in message:
            self.result_view.append(f"<span style='color: #FF9800;'>{message}</span>")
        elif "üåê –ë—Ä–∞—É–∑–µ—Ä:" in message:
            self.result_view.append(f"<span style='color: #9C27B0;'>{message}</span>")
        elif "‚ùå –ü–æ–º–∏–ª–∫–∞:" in message:
            self.result_view.append(f"<span style='color: #F44336;'>{message}</span>")
        else:
            self.result_view.append(message)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –ø–æ–ª—ñ
        self.status_label.setText(message)
        if "üéØ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ü—ñ–ª—å:" in message:
            self.status_label.setStyleSheet("padding: 10px; color: #2196F3;")
        elif "‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç:" in message:
            self.status_label.setStyleSheet("padding: 10px; color: #4CAF50;")
        elif "ü§î –ú–æ–¥–µ–ª—å –¥—É–º–∞—î:" in message:
            self.status_label.setStyleSheet("padding: 10px; color: #FF9800;")
        elif "üåê –ë—Ä–∞—É–∑–µ—Ä:" in message:
            self.status_label.setStyleSheet("padding: 10px; color: #9C27B0;")
        elif "‚ùå –ü–æ–º–∏–ª–∫–∞:" in message:
            self.status_label.setStyleSheet("padding: 10px; color: #F44336;")
        else:
            self.status_label.setStyleSheet("padding: 10px; color: black;")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é
        self.result_view.verticalScrollBar().setValue(
            self.result_view.verticalScrollBar().maximum()
        )
    
    def on_browser_error(self, error_message):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ browser-use"""
        self.result_view.append(f"<span style='color: red;'>{error_message}</span>")
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.program_running = False
        self.pause_button.setEnabled(False)
        self.stop_button.setEnabled(False)
        self.run_button.setEnabled(True)
    
    def on_browser_finished(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è browser-use"""
        self.result_view.append("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.program_running = False
        self.pause_button.setEnabled(False)
        self.stop_button.setEnabled(False)
        self.run_button.setEnabled(True)
    
    def pause_program(self):
        """–ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if not self.program_running or not self.browser_runner:
            return
            
        if self.browser_runner._is_paused:
            # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            self.browser_runner.resume()
            self.pause_button.setText("–ü–∞—É–∑–∞")
        else:
            # –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            self.browser_runner.pause()
            self.pause_button.setText("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
        
        self.status_label.setText("–ü—Ä–æ–≥—Ä–∞–º—É –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ...")
        self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def stop_program(self):
        """–ó—É–ø–∏–Ω–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if not self.program_running or not self.browser_runner:
            return
            
        # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        self.browser_runner.stop()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.program_running = False
        self.pause_button.setEnabled(False)
        self.stop_button.setEnabled(False)
        self.run_button.setEnabled(True)
        self.pause_button.setText("–ü–∞—É–∑–∞")
        
        self.status_label.setText("–ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ...")
        self.status_label.setStyleSheet("padding: 10px; color: black;")
    
    def launch_debug_browser(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É"""
        try:
            # –Ø–∫—â–æ –±—Ä–∞—É–∑–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            if self.debug_browser_process and self.debug_port:
                QMessageBox.information(
                    self, 
                    "–ë—Ä–∞—É–∑–µ—Ä —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É", 
                    f"–ë—Ä–∞—É–∑–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {self.debug_port}"
                )
                return
                
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –ø–æ—Ä—Ç 9222
            port = 9222
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π –ø–æ—Ä—Ç
            try:
                socket.create_connection(("localhost", port), timeout=1).close()
                reply = QMessageBox.question(
                    self, "–£–≤–∞–≥–∞", 
                    f"–ü–æ—Ä—Ç {port} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –ú–æ–∂–ª–∏–≤–æ, Chrome –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—Å–µ –æ–¥–Ω–æ?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if reply == QMessageBox.No:
                    return
            except (socket.timeout, socket.error):
                # –ü–æ—Ä—Ç –≤—ñ–ª—å–Ω–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                pass
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–≥–∏ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            log_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "chrome_debug.log")
            with open(log_file, "w") as f:
                f.write(f"–ó–∞–ø—É—Å–∫ Chrome –Ω–∞ –ø–æ—Ä—Ç—É {port} –≤ {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
            use_user_profile = self.use_user_profile_checkbox.isChecked() and self.chrome_profile_path
            user_profile = self.chrome_profile_path if use_user_profile else None
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
            process, port = launch_debug_browser(port, use_user_profile=use_user_profile, user_profile_dir=user_profile)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å —ñ –ø–æ—Ä—Ç
            self.debug_browser_process = process
            self.debug_port = port
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è —Å–∞–º–µ Chrome
            try:
                import requests
                import json
                response = requests.get(f"http://localhost:{port}/json/version")
                browser_info = json.loads(response.text)
                browser_name = browser_info.get("Browser", "")
                
                with open(log_file, "a") as f:
                    f.write(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±—Ä–∞—É–∑–µ—Ä–∞: {browser_name}\n")
                    
                if "Chrome" in browser_name:
                    QMessageBox.information(
                        self, 
                        "–ë—Ä–∞—É–∑–µ—Ä —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É", 
                        f"Google Chrome –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±—Ä–∞—É–∑–µ—Ä: {browser_name}"
                    )
                else:
                    QMessageBox.warning(
                        self, 
                        "–£–≤–∞–≥–∞", 
                        f"–ó–∞–ø—É—â–µ–Ω–æ –±—Ä–∞—É–∑–µ—Ä, –∞–ª–µ —Ü–µ –Ω–µ Chrome: {browser_name}. –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—é."
                    )
            except Exception as e:
                with open(log_file, "a") as f:
                    f.write(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(e)}\n")
                QMessageBox.information(
                    self, 
                    "–ë—Ä–∞—É–∑–µ—Ä —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É", 
                    f"–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞."
                )
            
            self.status_label.setText(f"Google Chrome —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        except Exception as e:
            QMessageBox.warning(
                self, 
                "–ü–æ–º–∏–ª–∫–∞", 
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä —É —Ä–µ–∂–∏–º—ñ –¥–µ–±–∞–≥—É: {str(e)}"
            )
    
    def change_api_key(self):
        """–ó–º—ñ–Ω–∞ API –∫–ª—é—á–∞"""
        dialog = ApiKeyDialog(self)
        dialog.key_input.setText("")  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞
        
        if dialog.exec_():
            self.api_key = dialog.api_key
            self.save_config()
            self.status_label.setText("API –∫–ª—é—á –æ–Ω–æ–≤–ª–µ–Ω–æ")

    def closeEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–¥–∞—Ç–∫—É"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–∞
        if self.program_running:
            reply = QMessageBox.question(
                self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                "–ü—Ä–æ–≥—Ä–∞–º–∞ –≤—Å–µ —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏?",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                self.stop_program()
                event.accept()
            else:
                event.ignore()
                return
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥–µ–±–∞–≥-–±—Ä–∞—É–∑–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π
        if self.debug_browser_process:
            try:
                self.debug_browser_process.terminate()
            except:
                pass
                
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
        self.save_config()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ API –∫–ª—é—á–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--reset-api-key":
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º API –∫–ª—é—á
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r') as f:
                    config = json.load(f)
                    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á API, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    config['api_key'] = ""
                with open(CONFIG_FILE, 'w') as f:
                    json.dump(config, f)
                print("API –∫–ª—é—á —Å–±—Ä–æ—à–µ–Ω!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ API –∫–ª—é—á–∞: {e}")
    
    window = WebMorpherApp()
    window.show()
    sys.exit(app.exec_()) 